{"version":3,"sources":["config.js","Components/Header/Header.js","Components/BlogCard/BlogCard.js","Containers/Blogs/Blogs.js","Components/GithubReactionTextCard/GithubReactionTextCard.js","Containers/BlogPost/BlogPost.js","Routes.js","serviceWorker.js","index.js"],"names":["config","Header","className","BlogCard","blog","useState","lables","setLables","history","useHistory","useEffect","nodes","filter","value","name","getLabels","labels","map","key","id","style","backgroundColor","color","readingTime","body","minutes","onClick","title","number","push","bodyText","Blogs","blogs","setBlogs","getBlogsFromGithubIssues","useCallback","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","query","gql","then","result","array","data","repository","issues","sort","left","right","dateTime","obj","Date","updatedAt","getTime","v","i","GithubReactionTextCard","link","href","target","rel","role","aria-label","BlogHome","addReaction","setAddreaction","reactionCounter","setReactionCounter","issueNumber","parseInt","window","location","split","pop","getEmojiStringByName","emojiName","setReactionFun","reactions","reactions_array","forEach","element","by","user","login","emoji","content","setBlogsFunction","issue","catch","err","console","error","src","author","avatarUrl","alt","moment","format","url","options","overrides","a","component","children","props","jsx","pre","language","docco","counters","onSelect","log","githubCounterEmojiSelect","onAdd","createBrowserHistory","require","Routes","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAAaA,G,OAEW,4DAFXA,EAKK,iBALLA,EAQC,sBARDA,EAWH,wBAXGA,EAcA,wBCTE,SAASC,IACpB,OACI,yBAAKC,UAAU,eACf,yBAAKA,UAAU,YACX,wBAAIA,UAAU,gBAAgBF,GAC9B,wBAAIE,UAAU,mBAAmBF,K,4BCH9B,SAASG,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAAQ,EACbC,mBAAS,IADI,mBAClCC,EADkC,KAC1BC,EAD0B,KAGrCC,EAAUC,cAiBd,OAfAC,qBAAU,YAQV,SAAmBC,GACjB,IAAML,EAASK,EAAMC,QAAO,SAACC,GAC3B,MAAsB,SAAfA,EAAMC,QAEfP,EAAUD,GAXVS,CAAUX,EAAKY,OAAOL,SACrB,CAACP,EAAKY,OAAOL,QAcd,yBAAKT,UAAU,iBACb,yBAAKA,UAAU,oBACb,6BACGI,EAAOW,KAAI,SAAAJ,GACV,OACE,yBAAKK,IAAKL,EAAMM,GAAIjB,UAAU,gBAAgBkB,MAAO,CAAEC,gBAAgB,IAAD,OAAMR,EAAMS,SAC/ET,EAAMC,UAKf,6BACE,uBAAGZ,UAAU,gBAAgBqB,IAAYnB,EAAKoB,MAAMC,QAApD,eAGJ,6BACE,yBAAKvB,UAAU,mBACb,wBAAIwB,QAAS,kBA7BHC,EA6BkBvB,EAAKuB,MA7BhBC,EA6BuBxB,EAAKwB,YA5BnDpB,EAAQqB,KAAR,gBAAsBF,EAAtB,YAA+BC,IADjC,IAAkBD,EAAOC,IA6BsCxB,EAAKuB,QAE9D,yBAAKzB,UAAU,yBACb,2BACGE,EAAK0B,WAGV,yBAAK5B,UAAU,uB,wzBCgCR6B,MA5Ef,WAAkB,IAAD,EACW1B,mBAAS,IADpB,mBACR2B,EADQ,KACDC,EADC,KAETC,EAA2BC,uBAAY,WAC5B,IAAIC,IAAa,CAC9BC,IAAK,iCACLC,QAAS,SAAAC,GACPA,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAK3C,UAOnC4C,MAAM,CACLA,MAAOC,YAAF,IAEoB7C,EAAkCA,KA4B5D8C,MAAK,SAAAC,GASV,IAA0BC,KARHD,EAAOE,KAAKC,WAAWC,OAAOxC,OAS7CyC,MAAK,SAACC,EAAMC,GAChB,IAAMC,EAAW,SAACC,GAAD,OAAS,IAAIC,KAAKD,EAAIE,WAAWC,WAClD,OAAOJ,EAASF,GAAQE,EAASD,IAAU,EACzCC,EAASD,GAASC,EAASF,IAAS,EAAI,KAG5CpB,EAASe,QAbR,IAeH,OAbAtC,qBAAU,WACRwB,MACC,CAACA,IAYF,6BACE,kBAAC,EAAD,MACA,yBAAKhC,UAAU,iBACZ8B,EAAMf,KAAI,SAAC2C,EAAGC,GACb,OAAO,kBAAC,EAAD,CAAUzD,KAAMwD,EAAG1C,IAAK2C,U,6ECzE1B,SAASC,EAAT,GAA2C,IAATC,EAAQ,EAARA,KAC/C,OACE,yBAAK7D,UAAU,4BACb,2DACA,8BACA,8BACE,uBAAG8D,KAAMD,EAAME,OAAO,SAASC,IAAI,uBAAnC,eACc,0BAAMC,KAAK,MAAMC,aAAW,kBAA5B,mB,kyBCGP,SAASC,IAAY,IAAD,EACRhE,mBAAS,IADD,mBAC1BD,EAD0B,KACpB6B,EADoB,OAEK5B,oBAAS,GAFd,mBAE1BiE,EAF0B,KAEbC,EAFa,OAGalE,mBAAS,IAHtB,mBAG1BmE,EAH0B,KAGTC,EAHS,KAI3BC,EAAcC,SAASC,OAAOC,SAASb,KAAKc,MAAM,KAAKC,OAEvDC,EAAuB7C,uBAAY,SAAC8C,GACxC,OAAQA,GACN,IAAK,YACH,MAAO,eAET,IAAK,cACH,MAAO,eAET,IAAK,QACH,MAAO,eAET,IAAK,SACH,MAAO,eAET,IAAK,WACH,MAAO,eAET,IAAK,QACH,MAAO,eAET,IAAK,SACH,MAAO,eAET,IAAK,OACH,MAAO,eAET,QACE,MAAO,MAEV,IAEGC,EAAiB/C,uBAAY,SAACgD,GAMlC,IAAIC,EAAkB,GACtBD,EAAUE,SAAQ,SAAAC,GAChB,IAAI9B,EAAM,CACR+B,GAAID,EAAQE,KAAKC,MACjBC,MAAOV,EAAqBM,EAAQK,UAEtCP,EAAgBvD,KAAK2B,MAGvBiB,EAAmBW,KAClB,CAACJ,IAEEY,EAAmBzD,uBAAY,SAACa,GACpCf,EAASe,GACTkC,EAAelC,EAAMmC,UAAUxE,SAC9B,CAACuE,IAEEhD,EAA2BC,uBAAY,WAC5B,IAAIC,IAAa,CAC9BC,IAAK,iCACLC,QAAS,SAAAC,GACPA,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAK3C,UAOnC4C,MAAM,CACLA,MAAOC,YAAF,IAEoB7C,EAAkCA,EACrC0E,KA6BvB5B,MAAK,SAAAC,GACJ6C,EAAiB7C,EAAOE,KAAKC,WAAW2C,UAEzCC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,QAEjB,CAACrB,EAAakB,IAGjBlF,qBAAU,WACRwB,MACC,CAACA,IA8BJ,OACE,6BACG9B,EAAKuB,OACJ,yBAAKzB,UAAU,aACb,wBAAIA,UAAU,cAAcE,EAAKuB,OACjC,6BACE,yBAAKzB,UAAU,kBACb,yBAAKA,UAAU,SAASgG,IAAK9F,EAAK+F,OAAOC,UAAWC,IAAKjG,EAAK+F,OAAOV,QACrE,6BACE,uBAAGvF,UAAU,eAAeE,EAAK+F,OAAOV,OACxC,uBAAGvF,UAAU,aACVoG,IAAOlG,EAAKsD,WAAW6C,OAAO,eADjC,MACoDhF,IAAYnB,EAAKoB,MAAMC,QAD3E,eAC+F,uBAAGuC,KAAM5D,EAAKoG,IAAKvC,OAAO,UAA1B,sBAKrG,kBAAC,IAAD,CACEwC,QAAS,CACPC,UAAW,CACTC,EAAG,CACDC,UAhDE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaC,EAAhB,mCAChB,uBAAG9C,KAAM8C,EAAM9C,KAAMC,OAAO,SAASC,IAAI,sBAAsBhE,UAAU,oBACtE2G,EACD,2BAAOE,KAAG,GAAV,yGA+CUC,IAAK,CACHJ,UArCE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAAC,IAAD,CAAmBI,SAAS,aAAa7F,MAAO8F,KAC7CL,EAASC,MAAMD,eAwCTzG,EAAKoB,MAEP8C,GACC,0BAAMpE,UAAU,uCAEd,kBAAC,EAAD,CAAwB6D,KAAM3D,EAAKoG,OAGvC,kBAAC,gBAAD,CAAeW,SAAU3C,EAAiB4C,SAAU,SAAA1B,GAAK,OA5CjE,SAAkCA,GAChCM,QAAQqB,IAAI3B,GA2CuD4B,CAAyB5B,IAAQ6B,MAAO,WAvC3GhD,GAAgBD,QCxJpB,IACM9D,GAAUgH,EADWC,EAAQ,GAAWD,wBAc/BE,EAVA,WACb,OACE,kBAAC,IAAD,CAAQlH,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmH,OAAK,EAACC,KAAK,IAAIhB,UAAW7E,IACjC,kBAAC,IAAD,CAAO4F,OAAK,EAACC,KAAK,4BAA4BhB,UAAWvC,OCH7CwD,QACW,cAA7BjD,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD4H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxF,MAAK,SAAAyF,GACjCA,EAAaC,kB","file":"static/js/main.c4db4539.chunk.js","sourcesContent":["export const config = {\r\n  // Your Github Converted Token To Know How To Get Your Token Look at Readme.md\r\n  githubConvertedToken: \"MzY4YjRkZTg1ZmIzNTRjYzYyYmZiNjI1NWNmNzU1OTYyZGZhYjc1OQ==\",\r\n\r\n  //   Your Github UserName\r\n  githubUserName: \"ArunaBalavijay\",\r\n  //   Your Github Repo Name Where You Have your issues as Blog\r\n\r\n  githubRepo: \"muthu-nagappan-blog\",\r\n\r\n  // Your Personal Blog Title\r\n  title : \"Muthu Nagappan's blog\" ,\r\n\r\n  // Your Personal Blog Subtitle\r\n  subtitle : \"Expect the unexpected\"\r\n};\r\n","import React from 'react'\r\n\r\nimport './Header.css'\r\nimport {config} from \"../../config\"\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"main-header\">\r\n        <div className=\"wrap-big\">\r\n            <h1 className=\"header-title\">{config.title}</h1>\r\n            <h2 className=\"header-subtitle\">{config.subtitle}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport readingTime from \"reading-time\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./BlogCard.css\";\r\n\r\n\r\nexport default function BlogCard({ blog }) {\r\n  const [lables, setLables] = useState([]);\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getLabels(blog.labels.nodes);\r\n  }, [blog.labels.nodes]);\r\n\r\n  function openBlog(title, number) {\r\n    history.push(`/blog/${title}/${number}`);\r\n  }\r\n\r\n  function getLabels(nodes) {\r\n    const lables = nodes.filter((value) => {\r\n      return value.name !== \"blog\";\r\n    });\r\n    setLables(lables);\r\n  }\r\n\r\n  return (\r\n    <div className=\"blog-card-div\">\r\n      <div className=\"blog-card-header\">\r\n        <div>\r\n          {lables.map(value => {\r\n            return (\r\n              <div key={value.id} className=\"blog-catgeory\" style={{ backgroundColor: `#${value.color}` }}>\r\n                {value.name}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div>\r\n          <p className=\"reading-time\">{readingTime(blog.body).minutes} Min Read</p>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div className=\"blog-card-title\">\r\n          <h2 onClick={() => openBlog(blog.title, blog.number)}>{blog.title}</h2>\r\n        </div>\r\n        <div className=\"blog-card-description\">\r\n          <p>\r\n            {blog.bodyText}\r\n          </p>\r\n        </div>\r\n        <div className=\"blog-card-footer\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { gql } from \"apollo-boost\";\r\n\r\nimport Header from \"../../Components/Header/Header\";\r\nimport BlogCard from \"../../Components/BlogCard/BlogCard\";\r\nimport { config } from \"../../config\";\r\n\r\nfunction Blogs() {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const getBlogsFromGithubIssues = useCallback(() => {\r\n    const client = new ApolloClient({\r\n      uri: \"https://api.github.com/graphql\",\r\n      request: operation => {\r\n        operation.setContext({\r\n          headers: {\r\n            authorization: `Bearer ${atob(config.githubConvertedToken)}`\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    client\r\n      .query({\r\n        query: gql`\r\n          {\r\n            repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\r\n              issues(first: 100, states: OPEN, filterBy: { labels: \"blog\" }) {\r\n                nodes {\r\n                  title\r\n                  body\r\n                  bodyHTML\r\n                  bodyText\r\n                  number\r\n                  labels(first: 100) {\r\n                    nodes {\r\n                      color\r\n                      name\r\n                      id\r\n                    }\r\n                  }\r\n                  author {\r\n                    url\r\n                    avatarUrl\r\n                    login\r\n                  }\r\n                  updatedAt\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `\r\n      })\r\n      .then(result => {\r\n        setBlogsFunction(result.data.repository.issues.nodes);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBlogsFromGithubIssues();\r\n  }, [getBlogsFromGithubIssues]);\r\n\r\n  function setBlogsFunction(array) {\r\n    array.sort((left, right) => {\r\n      const dateTime = (obj) => new Date(obj.updatedAt).getTime();\r\n      return dateTime(left) > dateTime(right) ? -1 : (\r\n        dateTime(right) > dateTime(left) ? -1 : 0\r\n      );\r\n    })\r\n    setBlogs(array);\r\n  }\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"blog-div-main\">\r\n        {blogs.map((v, i) => {\r\n          return <BlogCard blog={v} key={i} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Blogs;\r\n","import React from \"react\";\r\n\r\nimport \"./GithubReactionTextCard.css\";\r\n\r\nexport default function GithubReactionTextCard({ link }) {\r\n  return (\r\n    <div className=\"reaction-text-github-div\">\r\n      <p>Give your reaction on Github</p>\r\n      <div></div>\r\n      <span>\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Github link <span role=\"img\" aria-label=\"lightning bolt\">⚡️</span>\r\n        </a>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { gql } from \"apollo-boost\";\r\nimport moment from \"moment\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport readingTime from \"reading-time\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport { GithubCounter } from \"react-reactions\";\r\n\r\nimport \"./BlogPost.css\";\r\nimport { config } from \"../../config\";\r\nimport GithubReactionTextCard from \"../../Components/GithubReactionTextCard/GithubReactionTextCard\";\r\n\r\nexport default function BlogHome() {\r\n  const [blog, setBlogs] = useState([]);\r\n  const [addReaction, setAddreaction] = useState(false);\r\n  const [reactionCounter, setReactionCounter] = useState([]);\r\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\r\n\r\n  const getEmojiStringByName = useCallback((emojiName) => {\r\n    switch (emojiName) {\r\n      case \"THUMBS_UP\":\r\n        return \"👍\";\r\n\r\n      case \"THUMBS_DOWN\":\r\n        return \"👎\";\r\n\r\n      case \"LAUGH\":\r\n        return \"😄\";\r\n\r\n      case \"HOORAY\":\r\n        return \"🎉\";\r\n\r\n      case \"CONFUSED\":\r\n        return \"😕\";\r\n\r\n      case \"HEART\":\r\n        return \"❤️\";\r\n\r\n      case \"ROCKET\":\r\n        return \"🚀\";\r\n\r\n      case \"EYES\":\r\n        return \"👀\";\r\n\r\n      default:\r\n        return \"\";\r\n    }\r\n  }, []);\r\n\r\n  const setReactionFun = useCallback((reactions) => {\r\n    // {\r\n    //   emoji: \"👍\", // String emoji reaction\r\n    //   by: \"case\" // String of persons name\r\n    // }\r\n\r\n    let reactions_array = [];\r\n    reactions.forEach(element => {\r\n      let obj = {\r\n        by: element.user.login,\r\n        emoji: getEmojiStringByName(element.content)\r\n      };\r\n      reactions_array.push(obj);\r\n    });\r\n\r\n    setReactionCounter(reactions_array);\r\n  }, [getEmojiStringByName]);\r\n\r\n  const setBlogsFunction = useCallback((array) => {\r\n    setBlogs(array);\r\n    setReactionFun(array.reactions.nodes);\r\n  }, [setReactionFun]);\r\n\r\n  const getBlogsFromGithubIssues = useCallback(() => {\r\n    const client = new ApolloClient({\r\n      uri: \"https://api.github.com/graphql\",\r\n      request: operation => {\r\n        operation.setContext({\r\n          headers: {\r\n            authorization: `Bearer ${atob(config.githubConvertedToken)}`\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    client\r\n      .query({\r\n        query: gql`\r\n          {\r\n            repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\r\n              issue(number: ${issueNumber}) {\r\n                title\r\n                body\r\n                bodyHTML\r\n                url\r\n                bodyText\r\n                number\r\n                bodyHTML\r\n                author {\r\n                  url\r\n                  avatarUrl\r\n                  login\r\n                }\r\n                reactions(first:100){\r\n                  nodes{\r\n                    content\r\n                    user{\r\n                      id\r\n                      login\r\n                    }\r\n                  }\r\n                }\r\n                updatedAt\r\n                id\r\n              }\r\n            }\r\n          }\r\n        `\r\n      })\r\n      .then(result => {\r\n        setBlogsFunction(result.data.repository.issue);\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }, [issueNumber, setBlogsFunction]);\r\n\r\n\r\n  useEffect(() => {\r\n    getBlogsFromGithubIssues();\r\n  }, [getBlogsFromGithubIssues]);\r\n\r\n  const HyperLink = ({ children, ...props }) => (\r\n    <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\" className=\"blog-post-anchor\">\r\n      {children}\r\n      <style jsx>\r\n        {`\r\n          a {\r\n            color: #484848;\r\n            font-weight: 400;\r\n          }\r\n        `}\r\n      </style>\r\n    </a>\r\n  );\r\n\r\n  const CodeBlock = ({ children }) => (\r\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n      {children.props.children}\r\n    </SyntaxHighlighter>\r\n  );\r\n\r\n  function githubCounterEmojiSelect(emoji) {\r\n    console.log(emoji);\r\n  }\r\n\r\n  function githubCounterAddReaction() {\r\n    setAddreaction(!addReaction);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {blog.title && (\r\n        <div className=\"blog-view\">\r\n          <h1 className=\"blog-title\">{blog.title}</h1>\r\n          <div>\r\n            <div className=\"author-details\">\r\n              <img className=\"avatar\" src={blog.author.avatarUrl} alt={blog.author.login} />\r\n              <div>\r\n                <p className=\"author-name\">{blog.author.login}</p>\r\n                <p className=\"blog-date\">\r\n                  {moment(blog.updatedAt).format(\"DD MMM YYYY\")} . {readingTime(blog.body).minutes} Min Read . <a href={blog.url} target=\"_black\">View On Github</a>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Markdown\r\n            options={{\r\n              overrides: {\r\n                a: {\r\n                  component: HyperLink\r\n                },\r\n                pre: {\r\n                  component: CodeBlock\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {blog.body}\r\n          </Markdown>\r\n          {addReaction && (\r\n            <span className=\"reaction-github-emoji anim-scale-in\">\r\n              {/* <GithubSelector onSelect={emoji => onEmojiSelect(emoji)} /> */}\r\n              <GithubReactionTextCard link={blog.url}/>\r\n            </span>\r\n          )}\r\n          <GithubCounter counters={reactionCounter} onSelect={emoji => githubCounterEmojiSelect(emoji)} onAdd={() => githubCounterAddReaction()} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Blogs from \"./Containers/Blogs/Blogs\"\r\nimport BlogHome from \"./Containers/BlogPost/BlogPost\";\r\n\r\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\r\nconst history = createBrowserHistory();\r\n\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Blogs} />\r\n        <Route exact path=\"/blog/:title/:issueNumber\" component={BlogHome}/>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Routes from './Routes';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<Routes />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}